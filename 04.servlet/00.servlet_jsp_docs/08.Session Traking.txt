
## http 특성
1. connection less
2. state less

## Session Management(상태정보 유지 방법):
	-- Http 특성의 stateless(상태정보를 유지못함)에 대한 해결책
	-- 사용자 요청에 대하여 필요한 상태정보를 유지시키는 방법제공
	-- 사용자 인증후 로그아웃(세션종료시점)할 때까지 정보를 저장, 공유하여 사용할수 있음
	
	-- 상태정보 유지 필요성
		1. 사용자 인증 : 로그인한 회원인지 체크할때
		2. 쇼핑카트에 구매한 물건을 담을때
	
	-- 방법: 쿠키, 세션, URLRewriting


## Session tracking (상태정보유지방법)
	1. 쿠키 사용 : Cookie
		-- javax.servlet.http.Cookie
		-- 클라이언트 시스템에 사용자의 정보를 응답시에 함께 쿠키데이터 전송
		-- 문자열만 전송
		-- 4kb 크기 까지 가능
		-- 사이트당 20개, 클라이언트당 300개 가능

	2. 세션 사용 : HttpSession
		-- javax.servlet.http.HttpSession
		-- 사용자별 하나의 HttpSession 객체를 생성하여 사용자별로 세션정보를 관리
		-- 웹서버에 사용자의 정보를 유지 관리
		-- 세션정보로 모든 데이터타입 가능(Object)
		-- 크기 제한 없음
		-- 갯수 제한 없음

	3. URLRewriting
		-- 클라이언트가 쿠키를 허용하지 않은경우 전송 URL뒤에 세션정보를 rewriting하여 정보유지
		-- 일반적으로 URLRewriting 방법으로 처리하기 보다는, 클라이언트에게 쿠기를 허용할것을 요구하여 세션을 처리함.


## Cookie
// 1. 쿠키 생성
Cookie c1 = new Cookie("userid", userid);
Cookie c2 = new Cookie("userGrade", userGrade);

c1.setMaxAge(60*60*24); // seconds : 24간 동안 쿠기 정보 유지 

// 2. 응답시에 쿠키 추가 
response.addCookie(c1);
response.addCookie(c2);

// 3. 요청시에 쿠기 정보 가져오기
	Cookie[] cookies = request.getCookies();
	HashMap cookieMap = new HashMap();; 
	if (cookies != null) {
		for (int index=0; index < cookies.length; index++) {
			// HashMap 쿠기 이름, 값으로 저장
			cookieMap.put(cookies[index].getName(), cookies[index].getValue());
		}
	}


## HttpSession

1. 세션객체 생성
	HttpSession session = request.getSession(boolean);

	true : getSession() / getSession(true)
	-- 세션이 없으면 새로운 세션생성, 존재하면 기존세션반환
	-- 사용자 인증후 처음으로 세션생성시 사용

	false : getSession(false)
	-- 세션이 없으면 null, 존재하면 기존세션반환
	-- 회원전용 서비스 이용시에 인증여부 검증후 서비스 사용
	-- Tomcat의 경우에는 사용자 요청이 오면 기본적으로 세션객체가 생성됨
	-- 사용자 인증시에 부여받은 세션정보의 유무에 따라 검증(문제해결가능)

2. 세션에 정보 저장 / 추출 / 삭제
	-- setAttribute("key", Object);
	-- getAttribute("key") : Object => Object Casting 필요
	-- removeAttribute("key") : 세션은 유지하면서 특정 정보만 삭제

	-- 기타 method
	setMaxInactiveInterval(int interval) 
	invalidate()
	isNew() : boolean

3. 세션을 이용해서 로그인 전 / 로그인 후 메뉴로 변경
4. 로그아웃 요청 구현 
5. 로그아웃하면 시작페이지로 이동

## 세션 예제
	HttpSession session = request.getSession(true); 
	session.setAttribute("userid", userid);			// 세션정보 설정
	session.setMaxInactiveInterval(30000);		// 세션 최대 시간 설정
	session.getId();												// 세션아이디
	session.isNew();												// 새로이 생성된(join) 세션여부

	// getSession(false): 
	// 세션이 없는 경우에는 null 값을 반환한다.(세션객체를 생성하지 않음), 
	// 세션이 있으면 기존 세션반환
	HttpSession session2 = request.getSession(false); 
	String userid = (String)session2.getAttribute("userid");

	// 세션 객체를 삭제한다. 
	session.invalidate();
	session.setMaxInactiveInterval(0);

## Tomcat 웹서버 세션 timeout 설정
	-- timeout 시간동안 클라이언트의 요청이 없으면 세션을 강제 종료시킴.
	-- c:\apache-tomcat-5.5.23\conf\web.xml
	-- 기본 30분으로 설정되어 있음
	-- <session-timeout>30</session-timeout>















