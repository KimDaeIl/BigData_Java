Expression Language_ JSP Standatd Tag Language

## 주의사항 : 
-- jsp 페이지등에 주석가능하면 사용하지말것 
	=> 주석으로 인해서 parsing error 발생됨

블로그 : 
JSTL : http://blog.naver.com/agapeuni?Redirect=Log&logNo=60118837184


DOCS:
Tomcat JSTL Library download : http://tomcat.apache.org/taglibs/standard/
http://download.oracle.com/docs/cd/E17802_01/products/products/jsp/jstl/1.1/docs/tlddocs/index.html

lab:
EL_JSTL\DOCS\jakarta-taglibs-standard-current-src\jakarta-taglibs-standard-1.1.2-src\standard\doc\web\GettingStarted.html

Version History:
JSP 2.4 ==> JSTL 1.1

<< JSTL & EL >>

JSP		:	<%= pageContext.getAttribute("notice").getWriter() %>
EL		:	 ${notice.writer}  ==  ${notice[wirter]}
JSTL	:	 <c:out value="${notice.writer}" default="guest"/>


<< EL : Expression Language >>

-	JSP 2.0 EL 포함 (JSP 1.2 에서는 JSTL 에 포함됨)
-	JSP 페이지를 쉽게 작성 가능, java code 대체, 재사용 가능

1.		기술방법 :
		${ expr }

2.		연산자 지원: 산술, 비교, 논리, 공백 연산자 제공
		
		산술연산자 :	
			+	 -	 *
			/		div
			%		mod
		
		비교연산자 :	
			==	    eq	
			!=		ne
			<		lt
			>		gt
			<=	    le
			>=	    ge
			
		논리연산자 :	
			&&		and	
			||		or
			!		not
											
		공백연산자 : 
			empty   (null 또는 공백여부 확인)  / not empty / !empty


3.		키워드 : 식별자로 사용못함
		and		eq		gt		true		instanceof		mod
		or		ne	 	le		false		empty
		no		lt		ge		null		div

4.		default 객체: 서블릿/JSP 값들을 쉽게 접근하기 위해서 제공된 객체들
		
		pageContext			    : PageContext 객체
		pageScope				: page scope에 포함된 객체들
		requestScope			: request scope에 포함된 객체들
		sessionScope			: session scope에 포함된 객체들
		applicationScope		: application scope에 포함된 객체들
		param						: HTTP parameters
		paramValues			    : parameter의 values
		header						: HTTP 헤더 정보
		headerValues			: 헤더의 values
		cookie						: 쿠키들
		initParam					: 컨텍스트의 초기화 parmeters

		default 사용예:

		${pageContext.request.requestURI}		// 요청 uri
		${requestScope.msg}					// request scope에서 저장된 msg 이름으로 저장된 객체 <jsp:getProperty name="aa" property="msg" scope="request" />
			>> <%= request.getAttribute("msg")%>

		${param.userid}						// userid 라는 이름의 파라메터값
			>> request.getParameter("userid")
5.		sample code : hello_el.jsp


<<JSTL : Java Standard Tag Library >>
	-- JSP 코드안의 java 코드 제거가 가능함
	-- 재사용 가능한 컴포넌트임
	-- Dynamic Contents를 작성 가능함
	-- 구성요소 = JSP + 태크 라이브러리 + web.xml + TagHandler 클래스

	### -- 구성요소 = JSP + 태크 라이브러리(TLD) + [web.xml] + TagHandler 클래스

1.		http:java.sun.com/products/jsp/jstl 참조
		JSTL 1.0	: TOMCAT 4.X (web.xml 파일에 TLD 파일에 대한 uri 기술)
		JSTL 1.1	: TOMCAT 5.X (web.xml 파일에 TLD 파일에 대한 uri 기술 불필요)

2.		JSTL libary :	 jstl.jar , standard.jar 
		--	c:\tomcat\lib 폴더에 복사하고 tomcat 재구동(서버 레벨)
		--	컨텍스트의 WEB-INF\lib 폴더에 복사한다.	(컨텍스트 레벨)

3.		JSP 페이지에 JSTL을 사용하기 위해서 taglib 지시어 기술
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
		<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
		<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>

4.	 Core Library	
		-- 수식, 제어흐름, URL 처리등 JSP에서의 기본적 기능 제공 라이브러리

		4.1	수식언어 지원
		--	<out>	:  
			JspWriter 통해서 수식 결과 출력
			<c:out value="${param.name}" default="Guest" />
		
		--	<set> : 
			변수에 값을 설정 시킴
			<c:set var="변수명" value="설정값" scope="page|request|session|application" />
			<c:set var="msg" value="Hello JSTL" />
			<c:out value="${msg}" />

		--	<remove>
			scope에 저장된 변수 삭제시킴
			<c:remove var="삭제변수명" scope="page|request|session|application" />

		--	<catch>
			예외처리 

		4.2	 제어흐름
		--	<if>	:
			조건이 참인 경우에 수행 (else 부분은 기술할 수 없음)
			<c:if test="테스트조건" 
					 var="테스트조건실행결과저장변수"
					 scope="page|request|session|application" />

			<c:if test="${!empty param.name}">
				이름: ${param.name}
				<br>
			</c:if>

			<c:if test="${empty param.name}">
					이름: Guest(손님)
					<br>
			</c:if>
			
		--	<choose>~<when>~	<otherwise>
			다중 조건 비교 수행, switch~case~default 와 유사

			<c:choose>
				<c:when test="${param.type == 1}"><c:out value="10분간 쉽니다"/></c:when>
				<c:when test="${param.type == 2}"><c:out value="20분간 쉽니다"/></c:when>
				<c:otherwise><c:out value="오늘 수업을 마치겠습니다." /></c:otherwise>
			</c:choose>


		--	<forEach>	
			count, item에 의한 반복 수행
			
			// count에 의한 반복 수행
			<c:forEach var="no" begin="1" end="10" step="1">
				<c:out value="${no}" />
			</c:forEach>

			// item들에 의한 반복 수행 : Collection
			// jdk1.5 for(타입 변수명 : collection참조변수명)
			<c:forEach var="item에대한참조변수명" items="${collection참조변수명}">
				<c:out value="${item에대한참조변수명.멤버이름}" />
			</c:forEach>

			<c:forEach var="h" items="${header}">
				<li> 
				<c:out value="${h.key}"/> : 
				<c:out value="${h.value}" />
			</c:forEach>

			<c:forEach var="vo" items="${requestScope.array}">
			  <tr align=center>
				<TD width=5% bgcolor=#eeeeee>${vo.num}</TD> 
				<TD width=15% bgcolor=#eeeeee> 
					<a href="main?action=VIEW&num=${num}">${vo.name}</a>
				</TD>
				<TD width=%10 bgcolor=#eeeeee>${vo.address}</TD>		
			  </tr>
			</c:forEach>

			<c:forEach var="vo" items="${requestScope.array}">
			  <tr align=center>
				<TD width=5% bgcolor=#eeeeee>
				    <input type="text" name="num" value="${vo.num}" readonly >
				    &nbsp;[읽기전용]
				</TD> 
				
				<TD width=15% bgcolor=#eeeeee> 
				  <input type="text" name="name" value="${vo.name}">	
				</TD>
				
				<TD width=%10 bgcolor=#eeeeee>
					<input type="text" name="address" value="${vo.address}">				
				</TD>		
			  </tr>
			</c:forEach>
			
		--	<forTokens>

		4.3	URL 관리
		--	<import>
		--	<param>
		--	<redirect>
		--	<url>

5.	 Sampl code:
		