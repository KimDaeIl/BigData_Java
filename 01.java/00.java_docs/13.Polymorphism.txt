
### Polymorphism (다형성):
	
1. 목적 : 
- 메서드 및 변수에 다형성을 적용하여 유지보수성, 확장성, 재사용성의 효율을 높임
- 적용 : 멤버변수타입, 매개변수타입, 반환타입, 배열타입, 메서드 
- 즉, 부모타입의 변수로 선언하면 모든 자식객체를 담을수 있는 저장공간
		
2. 다형성 종류
2.1 	Overloading (중복정의)
	- 같은 클래스, 또는 상속받은 메서드를 아규먼트 인자를 다르게 받도록 여러개 중복 정의
	- 메서드 이름은 동일하고,
	- 메서드의 아규먼트의 갯수, 순서, 타입은 반드시 다르게 지정해야함
	- 메서드의 반환타입, 접근제어자는 상관없음 (즉, 같아도 되고, 달라도 됨)
	
2.2	Overriding (재정의)
	- 상속받은 메서드를 서브클래스에 맞도록 코드구현로직을 변경하여 사용함
	- 반환타입, 메서드이름, 메서드 아규먼트 갯수, 순서, 타입은 동일해야함
	- 접근권한은 부모클래스의 권한보다 축소될 수 없음(즉, 같거나 확장은 가능함)
	- 예외는 부모클래스의 예외보다 확장될 수 없음(즉, 없거나, 작거나, 같은 예외를 던져야함)

2.3	부모타입으로 변수 선언 
	- 배열타입, 메서드의 매개변수 타입, 메서드의 반환타입, 단일변수타입
	- 부모타입의 참조변수로 서브객체를 reference 할 수 있음
	- 부모타입의 참조변수로는 서브객체의 멤버는 접근할 수 없음
	- 서브객체의 멤버를 접근하기 위해서는 서브객체타입으로 캐스팅하여 사용가능함
	- 예:	Person p = new Employee("홍길동", "인사팀", "서울시");
		p.name = "정유진"; 	// 부모의 멤버이므로 접근 가능
		p.dept = "감사팀";	// 자식멤버는 부모의 타입으로 접근 불가능하므로 컴파일오류
		Employee e = (Employee)p;
		e.dept = "감사팀"; 	// 자식타입으로 캐스팅후 자식객체의 멤버 접근 가능

2.4	instanceof 키워드
	- 자식타입으로 캐스팅하는경우에 캐스팅하기전에 해당 객체의 인스턴스인지 검사
	- 예:  if (p instanceof Employee) { 
			Employee e = (Employee)p;
		} else {
			// 다른객체의 인스턴스이므로 캐스팅 오류 발생처리
		}
				
## super 키워드
    - 부모 객체를 가르키는 참조변수
    
    - 방법:
        1) 부모의 멤버변수 및 멤버메서드를 가르킬때 사용
            super.부모멤버변수명;
            super.부모멤버메서드명();
        
        2) 자식객체의 생성자에서 부모객체의 생성자 지정시 사용
            super(param데이터1, param데이터n);
            
            부모생성자를 지정하지 않으면 자동으로 super() 부여됨
            즉, 부모의 아규먼트를 받지 않는 생성자에 의해서 부모객체 생성함
            
            주의사항: 
            자식객체의 생성자의 첫번째 수행문으로 선언
            this() 와 super() 함께 사용 못함


### instanceof 키워드
    1. 해당객체가 클래스의 인스턴스인지 확인해서 
        인스턴스이면 true 반환 그렇지 않으면 false를 반환
        객체타입으로 형변환 하기전에 확인한후 형변환 권장
        
    2. 사용법:
        if (부모참조변수명 instancof 서브클래스이름) {
            서브클래스이름 자식참조변수명 = (서브클래스이름)부모참조변수명;
            
            // 캐스팅을 수행한 후에는 자식의 모든 멤버를 접근 가능함
            자식참조변수명.자식멤버변수명;
            자식참조변수명.자식멤버메서드명();
        } 
	
   3. 주의
       -- 다중 if ~ eles if ~ 로 instanceof 확인시에는 
          sub-class가 앞에 나오고 뒤에 super-class가 위치되어야함

	-- if(참조변수명 instanceof Customer) {  
		// 맨앞에서 다 처리하므로 뒤에 서브로 내려가지않음
	   } else if (참조변수명 instanceof GeneralCustomer) {
	   } else if (참조변수명 instanceof SpecialCustomer) {
	   }

