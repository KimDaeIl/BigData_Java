## JDBC Programming ##

## JDBC 관련 property : driver, url db 벤더에서 결정
String driver = "oracle.jdbc.driver.OracleDriver";
String url = "jdbc:oracle:thin:@127.0.0.1:1521:XE";
String user = "hr";
String password = "tiger";

## api
-- java.sql.*
-- javax.sql.*   => DataSource
-- javax.naming.*

## Connection Pool : javax.sql.DataSource
-- java:comp/env/jdbc/Oracle

## DAO Pattern => MemberDAO
-- Data Access Object
-- Database에 연결, 자원해제, crud 를 위한 기능 모델링
-- Singleton Pattern 적용 설계 
-- Database에 연결, 자원해제 => FactoryDao 사용

## DTO Pattern
-- Data Transfer Object
-- Data 정보를 가지고 네트워크를 이동하는 객체
-- Encapsulation 적용 : private 멤버, public setter()/getter(), privae isXxxx()
-- 직렬화 객체 : implements java.io.Serializable (구현해야하는 메서드는 없음 => marked interface)


## Factory Pattern => FactoryDAO
-- DataBase 연결 및 자원해제 공통된 기능을 갖는 dao 공장 클래스
-- Singleton Pattern 적용 설계

## Singleton Pattern
-- 목적 : 해당 클래스에 대해서 하나의 instance(객체)로 사용 설계
-- 규칙 :
	1. private 생성자 선언
		private 클래스이름(){}

	2. 객체 생성없이 해당인스턴스를 제공하는 메서드 구현 : 
		public static 클래스이름 getInstance() {
			return instance;
		}

	3. 클래스타입의 static 멤버변수 선언
		private static 클래스이름 instance = new 클래스이름();  


## Web JDBC 연결
-- javax.sql.DataSource : Connection Pool
-- jdbc resource 설정
	1. tomcat\conf\context.xml
	2. tomcat\conf\server.xml
	3. tomcat\conf\Catalina\localhost\컨텍스트이름.xml

-- DAO 클래스
Context context = new InitialContext();
DataSource ds = (DataSource)context.lookup("java:comp/env/jdbc/Oracle);
Connection conn = ds.getConnection();

## tomcat\conf> context.xml
<?xml version="1.0" encoding="UTF-8"?>
<Context reloadable="true" privileged="true">
	<Resource
		name="jdbc/Oracle"
		auth="Container"
		type="javax.sql.DataSource"
		driverClassName="oracle.jdbc.driver.OracleDriver"
		url="jdbc:oracle:thin:@127.0.0.1:1521:XE"
		username="scott"
		password="tiger"
		maxActive="50"
		maxIdle="20"
		maxWait="-1"
	/>
</Context>
