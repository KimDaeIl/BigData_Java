
## 웹 어플리케이션 Overview ##

웹브라우저:
    -- 사용자의 요청을 서버에 전달
    -- 서버로 부터 받은 요청결과를 출력
    -- HTML 컨텐츠를 파싱하여 처리


웹서버:
    -- 웹서버는 클라이언트의 요청을 처리하여 응답하는 서버
    -- 전송 프로토콜 : tcp/ip
    -- 서비스 프로토콜 : http, ftp 등
	

CGI Script:
	장점:	
		-- 다양한 개발언어 및 스크립팅 언어로 작성할 수 있음.
		-- 웹서버의 기능을 확장시킴
		--	서버에 있는 프로그램코드를 실행하여 동적인 서비스 가능

	단점:
		-- 요청할때마다 프로세스 단위로 처리되므로 서버에 부하가중
		-- 응답시간이 늦음
		-- 동시 사용자(접속자)가 많을때 서버 다운 우려


Servlet (확장 CGI) : 
	장점 :
		-- 자바로 작성되므로 자바만 알면 쉽게 작성가능
		-- 자바의 객체지향성등 자바의 특성을 그대로 적용하여 견고한 프로그램 작성
		-- 사용자의 요청처리를 위해 미리 하나의 서블릿객체를 생성하여 초기화작업 수행(In processing 방식)
		-- 사용자가 요청하면 미리 로딩되어 있는 서블릿인스턴스가 Thread를 생성하여 서비스 수행

	단점: 
		--	자바코드속에 HTML 코드 사용 페이지 작성
		-- Presentation Logic 처리시 불편
		-- P/L(프리젠테이션 로직)과 B/L(비즈니스 로직)이 서블릿에 함께 존재
		    

JSP(Java Server Page) :
	장점 :
		-- B/L과 P/L을 분리하는것이 주요 목적
		-- HTML 코드 안에 필요시 자바코드로 페이지 작성
		-- 서버사이드 스크립트 언어	 <% .... %>
		-- JSP 태그, JSP 액션 태그 제공


웹컨테이너:

    -- 서블릿 JSP에 대한 처리를 담당
	-- 동적페이지(dynamic content page) 및 정적페이지(static content page) 에 대한 요청처리
    -- 사용자의 요청을 처리하기 위한 HttpServletRequest 객체  
    -- 사용자에게 응답을 하기 위한 HttpServletResponse 객체 
	-- 웹컨테이너는 서비스 메서드를 호출하기 위하여 HttpServletRequest, HttpServletResponse 객체를 생성
    -- 서블릿 객체에 대한 Servlet Life Cycle 관리와 실행환경을 제공
    -- 웹서버와 웹컨테이너가 독립적으로 존재하는 경우 : 아파치 웹서버, Resin 컨테이너
	-- 웹서버와 웹컨테이너 기능을 포함하는 경우 : Tomcat 




## 웹어클리케이션 개발 환경 구축
1) web server 
2) web container 

## Tomcat = Web Server + Web Container 
http://apache.org
http://tomcat.apache.org/

##  Tomcat 서버 구성
c:\tomcat\bin > 서버구동(startup.bat), 서버중지(shutdown.bat)

c:\tomcat\conf> 환경설정파일 (web.xml, server.xml, context.xml)
	- server.xml : port 번호 변경 (서버운영 default: 8080)
	- web.xml : mime-type, session-timeout 설정 (웹어플리케이션)
	- context.xml : DBMS 관련 Resource 환경설정
	- tomcat-users.xml : 서버 사용자 id/pw/권한 

## tomcat 설치후 환경설정 : tomcat ver.6.x

1) conf\server.xml 추가
				....
					<Context path="" docBase="ROOT" debug="5" reloadable="true" crossContext="true" />
      </Host>
      
2) conf\web.xml : invoker 검색해서 관련 엘리먼트 주석해제
	
	<servlet-name>invoker</servlet-name>    
	
3) conf\context.xml DataResource 관련 추가
	
	
## tomcat\webapps > 웹어플리케이션 설치 기본 폴더

## 웹어플리케이션의 배포폴더구조(spec : 반드시지켜야함)
1) tomcat\webapps\웹어플리케이션이름 > static 문서 : html, js, css, image, 서브폴더
2) tomcat\webapps\웹어플리케이션이름\WEB-INF > web.xml (환경설정 : deployment descriptor)
3) tomcat\webapps\웹어플리케이션이름\WEB-INF\classes > 패키지명\패키지명\*.class
4) tomcat\webapps\웹어플리케이션이름\WEB-INF\lib > my.jar, 기타등등.jar


## 서블릿 API
-- 1. 패키지 구성
-- javax.servlet.*;        일반적인 서블릿 관련클래스 패키지구성
   javax.servlet.http.*;   http 프로토콜에 특화된 클래스 패키지구성


-- 2. API 상속도
	
	javax.servlet.Servlet 인터페이스
        --  서블릿 LifeCycle 관련 메서드
	--  init(ServletConfig config) : 초기화 (컨테이너단에서 사용)
        --  service(ServletRequest req, ServletResponse res) : 요청처리메서드
 	--  destroy() : 서비스해제, 기존서비스가 변경 => 자원해제 역할담당메서드

	javax.servlet.GenericServlet 추상클래스 

	-- abstract service(ServletRequest req, ServletResponse res) 
	-- init() : 추가정의 => 사용자들에 서블릿초기화 필요시 재정의사용


	javax.servlet.http.HttpServlet 추상클래스
	-- http 프로토콜에 특화된 서블릿을 위한 일반화시킨 클래스
	-- http 프로토콜에 특화된 서블릿 클래스 작성시에 상속강제 
           (public class HelloServlet extends HttpServlet)
	-- 추가정의 : http 요청 방식에 대한 서비스 메서드 
		service(HttpServletRequest req, HttpServletResponse resp)
		doGet(HttpServletRequest req, HttpServletResponse resp)
		doPost(HttpServletRequest req, HttpServletResponse resp)
		doDelete(HttpServletRequest req, HttpServletResponse resp)
		doXxx(HttpServletRequest req, HttpServletResponse resp)

## 서비스 요청 / 응답을 위한 객체

1.  ServletRequest <= HttpServletRequest 

-- 서비스 요청 정보 모델링 객체

2.  ServletResponse <= HttpServletResponse 

-- 서비스 응답 정보 모델링 객체


	## 서블릿 프로그래밍 작성 규칙 : http web 기반
	
	0. import javax.servlet.*;
	   import javax.servlet.http.*;
	   import java.io.*;
	   
	1. extends HttpServlet
	2. http 요청에 따른 서비스 메서드 재정 
		 2-1) get 요청 
		 	=> doGet(HttpServletRequest, HttpServletResponse) 재정의
		 2-2) post 요청 
		 => doPost(HttpServletRequest, HttpServletResponse) 재정의


## 웹어플리케이션 구성요소 (구성 파일)

1. static 문서 : html, jsp, js, css, image 등 (view) => 컨텍스트이름>
2. java src : servlet, dto, dao, java class 등 => 컨텍스트이름\WEB-INF\classes>
3. library : *.jar => 컨텍스트이름\WEB-INF\lib>
4. 웹환경설정 : web.xml (deployment descriptor)=> => 컨텍스트이름\WEB-INF>


## 웹어플리케이션 서비스 절차

1. 웹어플리케이션을 개발
2. 웹서버에 설치 : c:\tomcat\webapps\컨텍스트이름
3. 웹서버 구동
4. 사용자가 웹어플리케이션 요청 (URL)


## 웹어플리케이션(웹컨텍스트, 웹컴포넌트) 요청 URL 
1. 기본 형식
	프로토콜://서버IP:포트번호/요청페이지
	프로토콜://DNS이름:포트번호/요청페이지
	
2. 서블릿 요청 : 단, ROOT 컨텍스트의 경우는 이름 표기하지 않음
	http://서버ip:port/컨텍스트이름/servlet/패키지명.패키지명.요청서블릿클래스

3. URL-PATTERN 매핑으로 요청
	http://서버ip:port/컨텍스트이름/url-pattern명

3. HTML, JSP 페이지 요청
	http://127.0.0.1:8080/helloweb/
	http://127.0.0.1:8080/helloweb/login.html
	http://127.0.0.1:8080/helloweb/admin/customerList.html


## HTTP 프로토콜 :
    -- 요청 - 응답 프로토콜
    -- 특징: 
		1. connectionless -> 요청에 대해 응답하고 나면 접속을 끊는다.
		2. stateless -> 요청자에 대해 상태정보를 유지할 수 없다.
    -- http 메서드방식 : get, post 등

    -- 장점 : 인터넷에 네트워크나 서버의 오버헤드를 줄일수 있다.
    -- 단점 : 연속되는 작업에서 이전 정보(상태정보)를 유지할 수 없다.	
                ==> 데이타추적, 사용자 인식등의 서비스가 어렵다.
	-- 상태정보 유지 필요성
		1. 사용자 인증 : 로그인한 회원인지 체크할때
		2. 쇼핑카트에 구매한 물건을 담을때


## HTTP 요청 방식

1. HTTP GET 메서드 방식:
    -- 요청 URL 뒤에 전송데이터를 붙여서 전송
    -- 요청URL?변수명1=값1&변수명n=값n
    
    -- ? : 요청URL과 전송메시지(데이터)를 분리해주는 구분자
    -- & : 전송메시지에서 데이터들을 분리해주는 구분자
    
    -- url 입력, <a href="">, form method 미지정, form method="get"
    -- 256자까지 문자 제약, url뒤에 문자열로 전송되므로 사용자가 식별가능(보안취약)
    -- 보안데이터, 긴데이터는 get 전송하지 않음
    -- 즐겨찾기등록, 자료검색등에 get방식 사용


2. HTTP POST 메서드 방식:
    -- form method="post" 지정시만 가능
    -- 전송메시지(데이터)를 body 부분에 스트림의 형태로 전송
    -- 	문자길이 제한 없음
    -- body 부분에 전송되므로 사용자가 볼 수 없음
    -- 보안데이터, 긴데이터 전송시 사용함
    -- 로그인, 회원가입등 post 방식 사용


## 서블릿 역할 : Controller 담당 클래스
1. 요청파악 : 요청목록
2. 요청 데이터 추출
3. 요청 데이터 검증
4. 데이터가 올바르면 모델에게 요청처리 의뢰 : Model (B/L, DAO, DTO)
5. 수행결과받아서 결과(응답)데이터 설정: setAttribute(key, value)
6. 응답페이지 이동 : 
	-- 성공, 실패에 따른 응답페이지
	-- 응답결과 사용 : getAttribute(key)


## 서블릿 클래스 작성 절차:

	1. 서블릿 관련 클래스들에 대한 import 구문
		import javax.servlet.*;
		import javax.servlet.http.*;
		import java.io.*;

	2.	http 프로토콜을 위한 서블릿을 위해 HttpServlet 상속받음
		extends HttpServlet

	3. http 요청 방식에 따른 메서드 재정의
		public void doGet(HttpServletRequest request, HttpServletResponse response){}
		public void doPost(HttpServletRequest request, HttpServletResponse response){}

	4.	요청 서비스 메서드 재정의 절차 : doGet(){}, doPost(){}
		
		4.1	응답을 위한 MIME TYPE 및 한글 인코딩설정
				response.setContentType("text/html;charset=euc-kr");
		
		4.2	응답을 위한 출력 스트림 생성
				PrintWriter out = res.getWriter();		// character 스트림
				ServletOutputStream out = response.getOutputStream();	// byte 스트림
		
		4.3	요청처리 결과페이지 작성 : 자바코드속에 html 코드로 전송페이지 작성
				out.println("<html> .... </html>");
		
		4.4	자원해제
				out.close();


## 서블릿 웹프로그램 개발 절차:

	1. 서블릿 클래스 작성 : HelloServlet.java
	2. 컴파일시 classpath에 서블릿 api 추가: 
		set classpath=.;c:\practice\apache-tomcat-5.5.23\common\lib\servlet-api.jar
	3. 클래스 서버에 deploy : ROOT 컨텍스트
		c:\practice\apache-tomcat-5.5.23\ROOT\WEB-INF\classes
	4.	웹서버 구동 : c:\apache-tomcat-5.5.23\bin\startup.bat
	5. 서블릿 서비스 요청
		브라우저 URL : http://localhost:8080/servlet/HelloServlet


	1. 서블릿 클래스 작성 : HelloServlet.java
		//=== HelloServlet.java
		// 1. 서블릿 관련 클래스들에 대한 import
		import javax.servlet.*;
		import javax.servlet.http.*;
		import java.io.*;

		public class HelloServlet extends HttpServlet { // 2. http 프로토콜을 위한 서블릿을 위해 HttpServlet 상속받음

			// 3. get 요청시에 처리하는 서비스 메서드
			public void doGet(HttpServletRequest req, HttpServletResponse res) 
				 throws IOException {
				
				// 4.1	응답을 위한 MIME TYPE 및 한글 인코딩설정 : 
				// 해당 웹서버에서 지원되는 mime type 확인 : c:\tomcat\conf\web.xml
				res.setContentType("text/html;charset=euc-kr");

				// 4.2	응답을 위한 출력 스트림 생성
				PrintWriter out = res.getWriter();

				// 4.3	요청처리 결과페이지 작성 : 자바코드속에 html 코드로 전송페이지 작성
				out.println("<HTML><HEAD><TITLE>서블릿 페이지</TITLE></HEAD>");
				out.println("<BODY>");
				out.println("<H1>Hello Servlet!!!! 반가워요!!!</h1>");
				out.println("</BODY></HTML>");

				// 3.4 자원해제
				out.close();
			}
		}

		2. 컴파일
		//== compile.bat
		set classpath=.;C:\apache-tomcat-5.5.23\common\lib\servlet-api.jar
		javac -d . HelloServlet.java

		3. 클래스 서버에 deploy : ROOT 컨텍스트
		c:\apache-tomcat-5.5.23\webapps\ROOT\WEB-INF\classes>HelloServlet.class 위치시킴
		
		4.	웹서버 구동 : 
		c:\apache-tomcat-5.5.23\bin\startup.bat

		5. 서블릿 서비스 요청
		브라우저 URL : http://localhost:8080/servlet/HelloServlet


## Deployment Descriptor(배치 기술서):
	-- web.xml 
	-- DTD 및 Schema에 Deploymnet Descriptor에 대한 구조 정의되어 있음
	-- 웹어플리케이션에 대한 설정 및 배치정보등에 대한 환경 설정 정의
	-- 해당 컨텍스트의 WEB-INF 폴더 밑에 web.xml 파일을 위치 시킨다.
	-- tomcat (servlet) version 에 따라 차이남.

## 웹어플리케이션 웹서버 배치 폴더 구조:

	1.	웹어플리케이션 설치 폴더 : 서비스하는 웹어플리케이션들을 설치하는 기본 폴더
		c:\apache-tomcat-5.5.23\webapps\
	
	2. 웹 컨텍스트 root 폴더 : 
		--	static 파일들이 위치한다. 
		--	필요시 서브폴더를 만들어서 관리(images, js, css, admin 등 서브폴더)	

		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름> html, jsp

		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\admin> html, jsp
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\images> *.gif
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\js> user.js
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\css> user.css

	3. WEB-INF 폴더 :
		-- Deployment Descriptor(web.xml) 파일을 위치시킴

		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF> web.xml
	
	4. WEB-INF\classes 폴더 :
		-- 서블릿 클래스 및 자바 클래스들을 위치시킴.
		-- 패키지로 컴파일된 클래스는 패키지 구조 그대로 서브폴더로 위치시킴

		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\classes> *.class  

		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\classes\ucamp\controller> *.class
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\classes\ucamp\dao> *.class
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\classes\ucamp\dto> *.class
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\classes\ucamp\exception> *.class
		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\classes\ucamp\util> *.class

	5. WEB-INF\lib 폴더
		-- 라이브러리 파일들을 위치 시킴

		c:\apache-tomcat-5.5.23\webapps\컨텍스트이름\WEB-INF\lib> *.jar


## SHOP 웹어플리케이션 웹서버 배치 폴더 구조 예:
	
	1.	배치 폴더 구조
		c:\apache-tomcat-5.5.23\webapps\SHOP> login.html
		c:\apache-tomcat-5.5.23\webapps\SHOP\WEB-INF> web.xml
		c:\apache-tomcat-5.5.23\webapps\SHOP\WEB-INF\classes\ucamp\controller> AddProductServlet.class
		c:\apache-tomcat-5.5.23\webapps\SHOP\WEB-INF\lib> user.jar

	2. web.xml
		<?xml version="1.0" encoding="ISO-8859-1"?>

		<web-app
			xmlns="http://java.sun.com/xml/ns/j2ee"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
			version="2.4">

			<context-param>
				<param-name>userListFile</param-name>
				<param-value>/WEB-INF/userlist.txt</param-value>
			</context-param>
			
			<listener>
				<listener-class>InitializeProductList</listener-class>
			</listener>	
					
			<servlet>
				<servlet-name>AddProduct</servlet-name>
				<servlet-class>ucamp.controller.AddProductServlet</servlet-class>
				<init-param>
					<param-name>driver</param-name>
					<param-value>oracle.jdbc.driver.OracleDriver</param-value>
				</init-param>									
			</servlet>

			<servlet-mapping>
				<servlet-name>AddProduct</servlet-name>
				<url-pattern>/insert</url-pattern>
			</servlet-mapping>

			<welcome-file-list>
				<welcome-file>/login.html</welcome-file>
			</welcome-file-list>

		</web-app>


	3. AddServlet 클래스 요청

		3.1	서블릿클래스 fully qualified로 요청 URL:
				http://localhost:8080/SHOP/servlet/ucamp.controller.AddProductServlet
		
		3.2   web.xml 설정된 <url-pattern>으로 요청 URL:
				http://localhost:8080/SHOP/insert

HTML FORM으로 부터 데이터(파라메터) 가져오기:

		-- FORM에 입력한 데이터는 요청객체 HttpServletRequest 객체를 통해서 가져올수있음
		-- getParameter(), getParameterValues(), getParameterNames()

		-- 단일 값을 가지고 있는 파라메터에 대한 데이터를 가져오기: TEXT, PASSWORD, RADIO, HIDDEN, TEXTAREA, SELECT
			String name = request.getParameter("username");

		-- 다중값을 가지고 있는 파라메터에 대한 데이터를 가져오기: CHECKBOX, MUTIPLE SELECT
			String[] hobbys = request.getParameterValues("hobby");
		
		-- FORM으로 넘겨온 모든 파라메터이름들을 왕창 가져와서 하나씩 순차적으로 파라메터 데이터 가져오기
			Enumeration e = request.getParameterNames();
			while(e.hasMoreElements()) {
				String pName = (String)e.nextElement();
				String pValue = request.getParameter();
			}


## 서블릿에 초기 파라메터 정의하기:

	-- web.xml 파일에 서블릿에 대한 초기 파라메터를 설정

		<servlet>
			<servlet-name>AddProduct</servlet-name>
			<servlet-class>ucamp.controller.AddProductServlet</servlet-class>

			<init-param>
				<param-name>catalog</param-name>
				<param-value>/WEB-INF/catalog.txt</param-value>
			</init-param>

			<init-param>
				<param-name>logoTitle</param-name>
				<param-value>LG Shopping Super Mall</param-value>
			</init-param>

		</servlet>

	-- 서블릿에 대한 초기 파라메터는 0개이상 여러개 설정할 수 있음.(init-param*)
	-- <init-param>으로 설정한 catalog, logoTitle 파라메터는 서블릿의 환경설정 객체인 ServletConfig 객체내에 저장됨.
	-- logoTitle 파라메터 데이터를 가져오기:
		String logo = config.getInitParameter("logoTitle") ; // logo에는 "LG Shopping Super Mall" 값을 전달받음

## MVC Pattern : 
	-- 웹어플리케이션 개발시 적용 Design Pattern
	-- Model, View, Controller의 3부분으로 설계와 구현을 분리 시킴

	1. Model :
		-- B/L을 가지고 있으며, DB에 접근
		-- View의 상태질의에 응답할 수 있음.
		-- 응용 프로그램 기능을 노출시킴
		-- Java Class, Enterprise JavaBean Component로 작성

	2. View :
		-- HTML 응답을 생성
		-- HTML 응답을 위한 페이지 작성시 Model에 상태를 질의하여 데이터를 참조함
		-- 사용자 요청에 대해 html form을 제공함
		-- JSP 페이지로 작성

	3. Controller:
		-- HTTP 요청으로 부터 넘겨온 데이터를 확인함
		-- 사용자 데이터를 Model의 데이터 변경 가능함.
		-- 응답에 대한 View를 선택함.(성공페이지, 실패페이지 등)
		-- Servlet으로 작성

										+------------+
					  +--------->	|    Model   |  <-------+
		상태질의 |				+------------+             | Model 상태변경
                      |                                                  |
			+----------+								+-----------------+ 
			|   View    |		<---------------	|    Controller    |
			+----------+			View 선택		+-----------------+ 
